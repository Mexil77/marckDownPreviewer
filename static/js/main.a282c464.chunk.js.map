{"version":3,"sources":["components/TextArea.js","components/DisplayText.js","components/BoxSection.js","App.js","reportWebVitals.js","index.js"],"names":["TextArea","name","id","cols","rows","onChange","this","props","inputText","value","text","Component","DisplayText","BoxSection","state","e","setState","target","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEqBA,E,4JACnB,WACE,OACE,8BACE,0BACEC,KAAK,GACLC,GAAG,SACHC,KAAK,KACLC,KAAK,KACLC,SAAUC,KAAKC,MAAMC,UACrBC,MAAOH,KAAKC,MAAMG,a,GAVUC,a,iBCGjBC,G,mKACnB,WACE,OACE,qBAAKV,GAAG,YAAR,SACE,cAAC,IAAD,UAAiBI,KAAKC,MAAMG,a,GAJKC,cCEpBE,E,4MACnBC,MAAQ,CACNJ,KAAK,8wC,EA8CPF,UAAY,SAACO,GACX,EAAKC,SAAS,CACZN,KAAMK,EAAEE,OAAOR,S,4CAInB,WACE,OACE,sBAAKP,GAAG,aAAR,UACE,cAAC,EAAD,CAAUQ,KAAMJ,KAAKQ,MAAMJ,KAAMF,UAAWF,KAAKE,YACjD,cAAC,EAAD,CAAaE,KAAMJ,KAAKQ,MAAMJ,c,GA1DEC,aCMzBO,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,6EACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a282c464.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TextArea extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <textarea\r\n          name=\"\"\r\n          id=\"editor\"\r\n          cols=\"80\"\r\n          rows=\"10\"\r\n          onChange={this.props.inputText}\r\n          value={this.props.text}\r\n        ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactMarckdown from \"react-markdown\";\r\n\r\nimport \"../cssComponents/DisplayText.css\";\r\n\r\nexport default class DisplayText extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"previewer\">\r\n        <ReactMarckdown>{this.props.text}</ReactMarckdown>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"../cssComponents/BoxSection.css\";\r\n\r\nimport TextArea from \"./TextArea\";\r\nimport DisplayText from \"./DisplayText\";\r\n\r\nexport default class BoxSection extends Component {\r\n  state = {\r\n    text: `# Welcome to my React Markdown Previewer!\r\n\r\n    ## This is a sub-heading...\r\n    ### And here's some other cool stuff:\r\n    \r\n    Heres some code, \\`<div></div>\\`, between 2 backticks.\r\n    \r\n    \\`\\`\\`\r\n    // this is multi-line code:\r\n    \r\n    function anotherExample(firstLine, lastLine) {\r\n      if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n        return multiLineCode;\r\n      }\r\n    }\r\n    \\`\\`\\`\r\n    \r\n    You can also make text **bold**... whoa!\r\n    Or _italic_.\r\n    Or... wait for it... **_both!_**\r\n    And feel free to go crazy ~~crossing stuff out~~.\r\n    \r\n    There's also [links](https://www.freecodecamp.com), and\r\n    > Block Quotes!\r\n    \r\n    And if you want to get really crazy, even tables:\r\n    \r\n    Wild Header | Crazy Header | Another Header?\r\n    ------------ | ------------- | -------------\r\n    Your content can | be here, and it | can be here....\r\n    And here. | Okay. | I think we get it.\r\n    \r\n    - And of course there are lists.\r\n      - Some are bulleted.\r\n         - With different indentation levels.\r\n            - That look like this.\r\n    \r\n    \r\n    1. And there are numbererd lists too.\r\n    1. Use just 1s if you want!\r\n    1. And last but not least, let's not forget embedded images:\r\n    \r\n    ![React Logo w/ Text](https://goo.gl/Umyytc)\r\n    `,\r\n  };\r\n\r\n  inputText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"boxSection\">\r\n        <TextArea text={this.state.text} inputText={this.inputText} />\r\n        <DisplayText text={this.state.text} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\n\nimport BoxSection from \"./components/BoxSection\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Write here whatever you want and see bellow</h1>\n      <BoxSection />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}